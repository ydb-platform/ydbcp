syntax = "proto3";

package ydbcp;
option go_package = "github.com/ydb-platform/ydbcp/pkg/proto;ydbcp";

import "backup.proto";
import "operation.proto";

// A set of methods for managing backups;.
service BackupService {
    rpc ListBackups(ListBackupsRequest) returns (ListBackupsResponse);

    // Returns the specified backup.
    rpc GetBackup (GetBackupRequest) returns (Backup);

    rpc MakeBackup(MakeBackupRequest) returns (Operation);

    rpc DeleteBackup(DeleteBackupRequest) returns (Operation);

    rpc MakeRestore(MakeRestoreRequest) returns (Operation);
}

message ListBackupsRequest {
    string container_id = 1;
    string database_name_mask = 2;

    // The maximum number of results per page that should be returned. If the number of available
    // results is larger than `page_size`, the service returns a `next_page_token` that can be used
    // to get the next page of results in subsequent ListBackups requests.
    // Acceptable values are 0 to 1000, inclusive. Default value: 100.
    uint32 page_size = 1000; // [(value) = "0-1000"];

    // Page token. Set `page_token` to the `next_page_token` returned by a previous ListBackups
    // request to get the next page of results.
    string page_token = 1001; // [(length) = "<=100"];
}

message ListBackupsResponse {
    repeated Backup backups = 1;
    string next_page_token = 2;
}

message GetBackupRequest {
    string id = 1;
}

message MakeBackupRequest {
    string container_id = 1;
    string database_name = 2;
    string endpoint = 3;
    // Full path to a table or directory. Empty source_paths means backup of root directory.
    repeated string source_paths = 4;  // [(size) = "<=256"];
    // Regexp for paths excluded from backup.
    repeated string source_paths_to_exclude = 5;  // [(size) = "<=256"];
}

message DeleteBackupRequest {
    string backup_id = 1;
}

message MakeRestoreRequest {
    string container_id = 1;
    string backup_id = 2;
    string database_name = 3;
    string destination_prefix = 4;
}
