// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: ydbcp/v1alpha1/backup_schedule_service.proto

package ydbcp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BackupScheduleService_CreateBackupSchedule_FullMethodName = "/ydbcp.v1alpha1.BackupScheduleService/CreateBackupSchedule"
	BackupScheduleService_UpdateBackupSchedule_FullMethodName = "/ydbcp.v1alpha1.BackupScheduleService/UpdateBackupSchedule"
	BackupScheduleService_GetBackupSchedule_FullMethodName    = "/ydbcp.v1alpha1.BackupScheduleService/GetBackupSchedule"
	BackupScheduleService_ListBackupSchedules_FullMethodName  = "/ydbcp.v1alpha1.BackupScheduleService/ListBackupSchedules"
	BackupScheduleService_ToggleBackupSchedule_FullMethodName = "/ydbcp.v1alpha1.BackupScheduleService/ToggleBackupSchedule"
)

// BackupScheduleServiceClient is the client API for BackupScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackupScheduleServiceClient interface {
	CreateBackupSchedule(ctx context.Context, in *CreateBackupScheduleRequest, opts ...grpc.CallOption) (*BackupSchedule, error)
	UpdateBackupSchedule(ctx context.Context, in *UpdateBackupScheduleRequest, opts ...grpc.CallOption) (*BackupSchedule, error)
	GetBackupSchedule(ctx context.Context, in *GetBackupScheduleRequest, opts ...grpc.CallOption) (*BackupSchedule, error)
	ListBackupSchedules(ctx context.Context, in *ListBackupSchedulesRequest, opts ...grpc.CallOption) (*ListBackupSchedulesResponse, error)
	ToggleBackupSchedule(ctx context.Context, in *ToggleBackupScheduleRequest, opts ...grpc.CallOption) (*BackupSchedule, error)
}

type backupScheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackupScheduleServiceClient(cc grpc.ClientConnInterface) BackupScheduleServiceClient {
	return &backupScheduleServiceClient{cc}
}

func (c *backupScheduleServiceClient) CreateBackupSchedule(ctx context.Context, in *CreateBackupScheduleRequest, opts ...grpc.CallOption) (*BackupSchedule, error) {
	out := new(BackupSchedule)
	err := c.cc.Invoke(ctx, BackupScheduleService_CreateBackupSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupScheduleServiceClient) UpdateBackupSchedule(ctx context.Context, in *UpdateBackupScheduleRequest, opts ...grpc.CallOption) (*BackupSchedule, error) {
	out := new(BackupSchedule)
	err := c.cc.Invoke(ctx, BackupScheduleService_UpdateBackupSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupScheduleServiceClient) GetBackupSchedule(ctx context.Context, in *GetBackupScheduleRequest, opts ...grpc.CallOption) (*BackupSchedule, error) {
	out := new(BackupSchedule)
	err := c.cc.Invoke(ctx, BackupScheduleService_GetBackupSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupScheduleServiceClient) ListBackupSchedules(ctx context.Context, in *ListBackupSchedulesRequest, opts ...grpc.CallOption) (*ListBackupSchedulesResponse, error) {
	out := new(ListBackupSchedulesResponse)
	err := c.cc.Invoke(ctx, BackupScheduleService_ListBackupSchedules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupScheduleServiceClient) ToggleBackupSchedule(ctx context.Context, in *ToggleBackupScheduleRequest, opts ...grpc.CallOption) (*BackupSchedule, error) {
	out := new(BackupSchedule)
	err := c.cc.Invoke(ctx, BackupScheduleService_ToggleBackupSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackupScheduleServiceServer is the server API for BackupScheduleService service.
// All implementations must embed UnimplementedBackupScheduleServiceServer
// for forward compatibility
type BackupScheduleServiceServer interface {
	CreateBackupSchedule(context.Context, *CreateBackupScheduleRequest) (*BackupSchedule, error)
	UpdateBackupSchedule(context.Context, *UpdateBackupScheduleRequest) (*BackupSchedule, error)
	GetBackupSchedule(context.Context, *GetBackupScheduleRequest) (*BackupSchedule, error)
	ListBackupSchedules(context.Context, *ListBackupSchedulesRequest) (*ListBackupSchedulesResponse, error)
	ToggleBackupSchedule(context.Context, *ToggleBackupScheduleRequest) (*BackupSchedule, error)
	mustEmbedUnimplementedBackupScheduleServiceServer()
}

// UnimplementedBackupScheduleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBackupScheduleServiceServer struct {
}

func (UnimplementedBackupScheduleServiceServer) CreateBackupSchedule(context.Context, *CreateBackupScheduleRequest) (*BackupSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackupSchedule not implemented")
}
func (UnimplementedBackupScheduleServiceServer) UpdateBackupSchedule(context.Context, *UpdateBackupScheduleRequest) (*BackupSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackupSchedule not implemented")
}
func (UnimplementedBackupScheduleServiceServer) GetBackupSchedule(context.Context, *GetBackupScheduleRequest) (*BackupSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackupSchedule not implemented")
}
func (UnimplementedBackupScheduleServiceServer) ListBackupSchedules(context.Context, *ListBackupSchedulesRequest) (*ListBackupSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackupSchedules not implemented")
}
func (UnimplementedBackupScheduleServiceServer) ToggleBackupSchedule(context.Context, *ToggleBackupScheduleRequest) (*BackupSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleBackupSchedule not implemented")
}
func (UnimplementedBackupScheduleServiceServer) mustEmbedUnimplementedBackupScheduleServiceServer() {}

// UnsafeBackupScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackupScheduleServiceServer will
// result in compilation errors.
type UnsafeBackupScheduleServiceServer interface {
	mustEmbedUnimplementedBackupScheduleServiceServer()
}

func RegisterBackupScheduleServiceServer(s grpc.ServiceRegistrar, srv BackupScheduleServiceServer) {
	s.RegisterService(&BackupScheduleService_ServiceDesc, srv)
}

func _BackupScheduleService_CreateBackupSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupScheduleServiceServer).CreateBackupSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupScheduleService_CreateBackupSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupScheduleServiceServer).CreateBackupSchedule(ctx, req.(*CreateBackupScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupScheduleService_UpdateBackupSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackupScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupScheduleServiceServer).UpdateBackupSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupScheduleService_UpdateBackupSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupScheduleServiceServer).UpdateBackupSchedule(ctx, req.(*UpdateBackupScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupScheduleService_GetBackupSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupScheduleServiceServer).GetBackupSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupScheduleService_GetBackupSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupScheduleServiceServer).GetBackupSchedule(ctx, req.(*GetBackupScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupScheduleService_ListBackupSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupScheduleServiceServer).ListBackupSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupScheduleService_ListBackupSchedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupScheduleServiceServer).ListBackupSchedules(ctx, req.(*ListBackupSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupScheduleService_ToggleBackupSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleBackupScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupScheduleServiceServer).ToggleBackupSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupScheduleService_ToggleBackupSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupScheduleServiceServer).ToggleBackupSchedule(ctx, req.(*ToggleBackupScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackupScheduleService_ServiceDesc is the grpc.ServiceDesc for BackupScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackupScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ydbcp.v1alpha1.BackupScheduleService",
	HandlerType: (*BackupScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBackupSchedule",
			Handler:    _BackupScheduleService_CreateBackupSchedule_Handler,
		},
		{
			MethodName: "UpdateBackupSchedule",
			Handler:    _BackupScheduleService_UpdateBackupSchedule_Handler,
		},
		{
			MethodName: "GetBackupSchedule",
			Handler:    _BackupScheduleService_GetBackupSchedule_Handler,
		},
		{
			MethodName: "ListBackupSchedules",
			Handler:    _BackupScheduleService_ListBackupSchedules_Handler,
		},
		{
			MethodName: "ToggleBackupSchedule",
			Handler:    _BackupScheduleService_ToggleBackupSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ydbcp/v1alpha1/backup_schedule_service.proto",
}
