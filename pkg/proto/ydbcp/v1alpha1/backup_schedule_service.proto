syntax = "proto3";

package ydbcp.v1alpha1;
option go_package = "github.com/ydb-platform/ydbcp/pkg/proto/ydbcp/v1alpha1;ydbcp";

import "ydbcp/v1alpha1/backup_schedule.proto";

// Service for managing backup schedules.
// YDB auth token can be passed via GRPC request metadata using authorization header.
service BackupScheduleService {
    // Creates a new backup schedule.
    // Required YDB permissions: `ydb.databases.backup`
    rpc CreateBackupSchedule (CreateBackupScheduleRequest) returns (BackupSchedule);

    // Updates an existing backup schedule by its ID.
    // Required YDB permissions: `ydb.databases.backup`
    rpc UpdateBackupSchedule (UpdateBackupScheduleRequest) returns (BackupSchedule);

    // Retrieves a backup schedule by its ID.
    // Required YDB permissions: `ydb.databases.get`
    rpc GetBackupSchedule (GetBackupScheduleRequest) returns (BackupSchedule);

    // Lists all backup schedules for a specified container.
    // Required YDB permissions: `ydb.databases.list`
    rpc ListBackupSchedules (ListBackupSchedulesRequest) returns (ListBackupSchedulesResponse);

    // Toggles the state of a backup schedule by its ID.
    // Required YDB permissions: `ydb.databases.backup`
    rpc ToggleBackupSchedule (ToggleBackupScheduleRequest) returns (BackupSchedule);

    // Deletes a backup schedule by its ID.
    // Required YDB permissions: `ydb.databases.backup`
    rpc DeleteBackupSchedule (DeleteBackupScheduleRequest) returns (BackupSchedule);
}

message CreateBackupScheduleRequest {
    // An identifier of an external resource which holds the record about the backup
    // (it can be the container id where the database is located).
    string container_id = 1;
    // The name of the database for which schedule will be created.
    string database_name = 2;
    // GRPC endpoint of the database.
    string endpoint = 3;
    // List of source paths included in the backup (empty list means backup of root directory).
    repeated string source_paths = 4;  // [(size) = "<=256"];
    // List of source paths to exclude from the backup.
    repeated string source_paths_to_exclude = 5;  // [(size) = "<=256"];
    // The name of the backup schedule.
    string schedule_name = 6;
    // The settings for the backup schedule.
    BackupScheduleSettings schedule_settings = 7;
}

message UpdateBackupScheduleRequest {
    // The ID of the backup schedule to update.
    string id = 1;
    // List of source paths included in the backup (empty list means backup of root directory).
    repeated string source_paths = 2;  // [(size) = "<=256"];
    // List of source paths to exclude from the backup.
    repeated string source_paths_to_exclude = 3;  // [(size) = "<=256"];
    // The name of the backup schedule.
    string schedule_name = 4;
    // The settings for the backup schedule.
    BackupScheduleSettings schedule_settings = 5;
}


message ListBackupSchedulesRequest {
    // The ID of the container for which to list backup schedules.
    string container_id = 1;
    // A mask to filter operations by database name using LIKE operator for pattern matching (ex.: "your_db_prefix%").
    // For more information about LIKE operator, see the https://ydb.tech/docs/en/yql/reference/syntax/expressions#check-match.
    string database_name_mask = 2;
    // A list of statuses to filter backup schedules.
    repeated BackupSchedule.Status display_status = 3;
    // The maximum number of results per page that should be returned. If the number of available
    // results is larger than `page_size`, the service returns a `next_page_token` that can be used
    // to get the next page of results in subsequent ListBackupSchedules requests.
    // Acceptable values are 0 to 1000, inclusive. Default value: 100.
    uint32 page_size = 1000;
    // Page token. Set `page_token` to the `next_page_token` returned by a previous ListBackups
    // request to get the next page of results.
    string page_token = 1001;
}

message ListBackupSchedulesResponse {
    // The list of backup schedules.
    repeated BackupSchedule schedules = 1;
    // The token for the next page of results.
    string next_page_token = 2;
}

message GetBackupScheduleRequest {
    // The ID of the backup schedule to retrieve.
    string id = 1;
}

message ToggleBackupScheduleRequest {
    // The ID of the backup schedule to toggle.
    string id = 1;
    // The new state of the backup schedule (true - active, false - inactive).
    bool active_state = 2;
}

message DeleteBackupScheduleRequest {
    // The ID of the backup schedule to delete.
    string id = 1;
}