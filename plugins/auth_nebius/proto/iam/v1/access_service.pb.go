// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: iam/v1/access_service.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthorizeResult_ResultCode int32

const (
	AuthorizeResult_OK                AuthorizeResult_ResultCode = 0 // Access granted.
	AuthorizeResult_PERMISSION_DENIED AuthorizeResult_ResultCode = 1 // Other cases of access denied.
	AuthorizeResult_UNKNOWN_SUBJECT   AuthorizeResult_ResultCode = 2 // if the subject: doesn't exist, deleted, not found or account doesn't exist in the tenant owning the resource.
	AuthorizeResult_INVALID_TOKEN     AuthorizeResult_ResultCode = 3 // The iam_token is not valid. It has an invalid length, invalid signature, etc.
)

// Enum value maps for AuthorizeResult_ResultCode.
var (
	AuthorizeResult_ResultCode_name = map[int32]string{
		0: "OK",
		1: "PERMISSION_DENIED",
		2: "UNKNOWN_SUBJECT",
		3: "INVALID_TOKEN",
	}
	AuthorizeResult_ResultCode_value = map[string]int32{
		"OK":                0,
		"PERMISSION_DENIED": 1,
		"UNKNOWN_SUBJECT":   2,
		"INVALID_TOKEN":     3,
	}
)

func (x AuthorizeResult_ResultCode) Enum() *AuthorizeResult_ResultCode {
	p := new(AuthorizeResult_ResultCode)
	*p = x
	return p
}

func (x AuthorizeResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthorizeResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_v1_access_service_proto_enumTypes[0].Descriptor()
}

func (AuthorizeResult_ResultCode) Type() protoreflect.EnumType {
	return &file_iam_v1_access_service_proto_enumTypes[0]
}

func (x AuthorizeResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthorizeResult_ResultCode.Descriptor instead.
func (AuthorizeResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_iam_v1_access_service_proto_rawDescGZIP(), []int{3, 0}
}

type AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode int32

const (
	AuthorizeResult_AuthorizeStatus_UNSPECIFIED       AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode = 0
	AuthorizeResult_AuthorizeStatus_OK                AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode = 1
	AuthorizeResult_AuthorizeStatus_PERMISSION_DENIED AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode = 2
	AuthorizeResult_AuthorizeStatus_UNAUTHENTICATED   AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode = 3
)

// Enum value maps for AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode.
var (
	AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "OK",
		2: "PERMISSION_DENIED",
		3: "UNAUTHENTICATED",
	}
	AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode_value = map[string]int32{
		"UNSPECIFIED":       0,
		"OK":                1,
		"PERMISSION_DENIED": 2,
		"UNAUTHENTICATED":   3,
	}
)

func (x AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode) Enum() *AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode {
	p := new(AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode)
	*p = x
	return p
}

func (x AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_iam_v1_access_service_proto_enumTypes[1].Descriptor()
}

func (AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode) Type() protoreflect.EnumType {
	return &file_iam_v1_access_service_proto_enumTypes[1]
}

func (x AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode.Descriptor instead.
func (AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_iam_v1_access_service_proto_rawDescGZIP(), []int{3, 0, 0}
}

type AuthorizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checks map[int64]*AuthorizeCheck `protobuf:"bytes,1,rep,name=checks,proto3" json:"checks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AuthorizeRequest) Reset() {
	*x = AuthorizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v1_access_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeRequest) ProtoMessage() {}

func (x *AuthorizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v1_access_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeRequest.ProtoReflect.Descriptor instead.
func (*AuthorizeRequest) Descriptor() ([]byte, []int) {
	return file_iam_v1_access_service_proto_rawDescGZIP(), []int{0}
}

func (x *AuthorizeRequest) GetChecks() map[int64]*AuthorizeCheck {
	if x != nil {
		return x.Checks
	}
	return nil
}

type AuthorizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[int64]*AuthorizeResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AuthorizeResponse) Reset() {
	*x = AuthorizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v1_access_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeResponse) ProtoMessage() {}

func (x *AuthorizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v1_access_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeResponse.ProtoReflect.Descriptor instead.
func (*AuthorizeResponse) Descriptor() ([]byte, []int) {
	return file_iam_v1_access_service_proto_rawDescGZIP(), []int{1}
}

func (x *AuthorizeResponse) GetResults() map[int64]*AuthorizeResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type AuthorizeCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permission   *Permission   `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission,omitempty"`
	ContainerId  string        `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ResourcePath *ResourcePath `protobuf:"bytes,3,opt,name=resource_path,json=resourcePath,proto3" json:"resource_path,omitempty"`
	// Types that are assignable to Identifier:
	//
	//	*AuthorizeCheck_IamToken
	//	*AuthorizeCheck_Account
	//	*AuthorizeCheck_AwsCompatibleSignature
	//	*AuthorizeCheck_AnonymousCredential
	Identifier isAuthorizeCheck_Identifier `protobuf_oneof:"identifier"`
}

func (x *AuthorizeCheck) Reset() {
	*x = AuthorizeCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v1_access_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeCheck) ProtoMessage() {}

func (x *AuthorizeCheck) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v1_access_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeCheck.ProtoReflect.Descriptor instead.
func (*AuthorizeCheck) Descriptor() ([]byte, []int) {
	return file_iam_v1_access_service_proto_rawDescGZIP(), []int{2}
}

func (x *AuthorizeCheck) GetPermission() *Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *AuthorizeCheck) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *AuthorizeCheck) GetResourcePath() *ResourcePath {
	if x != nil {
		return x.ResourcePath
	}
	return nil
}

func (m *AuthorizeCheck) GetIdentifier() isAuthorizeCheck_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *AuthorizeCheck) GetIamToken() string {
	if x, ok := x.GetIdentifier().(*AuthorizeCheck_IamToken); ok {
		return x.IamToken
	}
	return ""
}

func (x *AuthorizeCheck) GetAccount() *Account {
	if x, ok := x.GetIdentifier().(*AuthorizeCheck_Account); ok {
		return x.Account
	}
	return nil
}

func (x *AuthorizeCheck) GetAwsCompatibleSignature() *AwsCompatibleSignature {
	if x, ok := x.GetIdentifier().(*AuthorizeCheck_AwsCompatibleSignature); ok {
		return x.AwsCompatibleSignature
	}
	return nil
}

func (x *AuthorizeCheck) GetAnonymousCredential() *AnonymousCredential {
	if x, ok := x.GetIdentifier().(*AuthorizeCheck_AnonymousCredential); ok {
		return x.AnonymousCredential
	}
	return nil
}

type isAuthorizeCheck_Identifier interface {
	isAuthorizeCheck_Identifier()
}

type AuthorizeCheck_IamToken struct {
	IamToken string `protobuf:"bytes,4,opt,name=iam_token,json=iamToken,proto3,oneof"`
}

type AuthorizeCheck_Account struct {
	Account *Account `protobuf:"bytes,5,opt,name=account,proto3,oneof"`
}

type AuthorizeCheck_AwsCompatibleSignature struct {
	AwsCompatibleSignature *AwsCompatibleSignature `protobuf:"bytes,6,opt,name=aws_compatible_signature,json=awsCompatibleSignature,proto3,oneof"`
}

type AuthorizeCheck_AnonymousCredential struct {
	AnonymousCredential *AnonymousCredential `protobuf:"bytes,7,opt,name=anonymous_credential,json=anonymousCredential,proto3,oneof"`
}

func (*AuthorizeCheck_IamToken) isAuthorizeCheck_Identifier() {}

func (*AuthorizeCheck_Account) isAuthorizeCheck_Identifier() {}

func (*AuthorizeCheck_AwsCompatibleSignature) isAuthorizeCheck_Identifier() {}

func (*AuthorizeCheck_AnonymousCredential) isAuthorizeCheck_Identifier() {}

type AuthorizeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode AuthorizeResult_ResultCode       `protobuf:"varint,1,opt,name=resultCode,proto3,enum=nebius.iam.v1.AuthorizeResult_ResultCode" json:"resultCode,omitempty"`
	Account    *Account                         `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Status     *AuthorizeResult_AuthorizeStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AuthorizeResult) Reset() {
	*x = AuthorizeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v1_access_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeResult) ProtoMessage() {}

func (x *AuthorizeResult) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v1_access_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeResult.ProtoReflect.Descriptor instead.
func (*AuthorizeResult) Descriptor() ([]byte, []int) {
	return file_iam_v1_access_service_proto_rawDescGZIP(), []int{3}
}

func (x *AuthorizeResult) GetResultCode() AuthorizeResult_ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return AuthorizeResult_OK
}

func (x *AuthorizeResult) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *AuthorizeResult) GetStatus() *AuthorizeResult_AuthorizeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type AwsCompatibleSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwsAccessKeyId string                   `protobuf:"bytes,1,opt,name=aws_access_key_id,json=awsAccessKeyId,proto3" json:"aws_access_key_id,omitempty"`
	StringToSign   string                   `protobuf:"bytes,2,opt,name=string_to_sign,json=stringToSign,proto3" json:"string_to_sign,omitempty"`
	Signature      string                   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	SignKeyParams  *AmzSignatureV4KeyParams `protobuf:"bytes,4,opt,name=sign_key_params,json=signKeyParams,proto3" json:"sign_key_params,omitempty"`
}

func (x *AwsCompatibleSignature) Reset() {
	*x = AwsCompatibleSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v1_access_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsCompatibleSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCompatibleSignature) ProtoMessage() {}

func (x *AwsCompatibleSignature) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v1_access_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCompatibleSignature.ProtoReflect.Descriptor instead.
func (*AwsCompatibleSignature) Descriptor() ([]byte, []int) {
	return file_iam_v1_access_service_proto_rawDescGZIP(), []int{4}
}

func (x *AwsCompatibleSignature) GetAwsAccessKeyId() string {
	if x != nil {
		return x.AwsAccessKeyId
	}
	return ""
}

func (x *AwsCompatibleSignature) GetStringToSign() string {
	if x != nil {
		return x.StringToSign
	}
	return ""
}

func (x *AwsCompatibleSignature) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *AwsCompatibleSignature) GetSignKeyParams() *AmzSignatureV4KeyParams {
	if x != nil {
		return x.SignKeyParams
	}
	return nil
}

type AmzSignatureV4KeyParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmzDate    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=amz_date,json=amzDate,proto3" json:"amz_date,omitempty"`
	AmzRegion  string                 `protobuf:"bytes,2,opt,name=amz_region,json=amzRegion,proto3" json:"amz_region,omitempty"`
	AmzService string                 `protobuf:"bytes,3,opt,name=amz_service,json=amzService,proto3" json:"amz_service,omitempty"`
}

func (x *AmzSignatureV4KeyParams) Reset() {
	*x = AmzSignatureV4KeyParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v1_access_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmzSignatureV4KeyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmzSignatureV4KeyParams) ProtoMessage() {}

func (x *AmzSignatureV4KeyParams) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v1_access_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmzSignatureV4KeyParams.ProtoReflect.Descriptor instead.
func (*AmzSignatureV4KeyParams) Descriptor() ([]byte, []int) {
	return file_iam_v1_access_service_proto_rawDescGZIP(), []int{5}
}

func (x *AmzSignatureV4KeyParams) GetAmzDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AmzDate
	}
	return nil
}

func (x *AmzSignatureV4KeyParams) GetAmzRegion() string {
	if x != nil {
		return x.AmzRegion
	}
	return ""
}

func (x *AmzSignatureV4KeyParams) GetAmzService() string {
	if x != nil {
		return x.AmzService
	}
	return ""
}

type AnonymousCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnonymousCredential) Reset() {
	*x = AnonymousCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v1_access_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonymousCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonymousCredential) ProtoMessage() {}

func (x *AnonymousCredential) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v1_access_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonymousCredential.ProtoReflect.Descriptor instead.
func (*AnonymousCredential) Descriptor() ([]byte, []int) {
	return file_iam_v1_access_service_proto_rawDescGZIP(), []int{6}
}

type AuthorizeResult_AuthorizeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=nebius.iam.v1.AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode" json:"code,omitempty"`
	Message string                                              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AuthorizeResult_AuthorizeStatus) Reset() {
	*x = AuthorizeResult_AuthorizeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_v1_access_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeResult_AuthorizeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeResult_AuthorizeStatus) ProtoMessage() {}

func (x *AuthorizeResult_AuthorizeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_iam_v1_access_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeResult_AuthorizeStatus.ProtoReflect.Descriptor instead.
func (*AuthorizeResult_AuthorizeStatus) Descriptor() ([]byte, []int) {
	return file_iam_v1_access_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *AuthorizeResult_AuthorizeStatus) GetCode() AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode {
	if x != nil {
		return x.Code
	}
	return AuthorizeResult_AuthorizeStatus_UNSPECIFIED
}

func (x *AuthorizeResult_AuthorizeStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_iam_v1_access_service_proto protoreflect.FileDescriptor

var file_iam_v1_access_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6e,
	0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x69,
	0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x1a, 0x58, 0x0a, 0x0b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e,
	0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x5a, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xcd, 0x03, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x62, 0x69,
	0x75, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x61, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x61, 0x6d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x18, 0x61, 0x77, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x65, 0x62, 0x69,
	0x75, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x16, 0x61, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x61, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f,
	0x75, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x13,
	0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x8d, 0x04, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6e, 0x65, 0x62, 0x69,
	0x75, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x30, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xdf, 0x01, 0x0a, 0x0f, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6e,
	0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x5a, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0x53, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10,
	0x03, 0x22, 0xd7, 0x01, 0x0a, 0x16, 0x41, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x11,
	0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x7a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x56, 0x34, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x73, 0x69,
	0x67, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x17,
	0x41, 0x6d, 0x7a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x34, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x61, 0x6d, 0x7a, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x61, 0x6d, 0x7a, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x6d, 0x7a, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x6d, 0x7a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x6d, 0x7a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x6d, 0x7a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x15,
	0x0a, 0x13, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x32, 0x5f, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x12, 0x1f, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6c, 0x0a, 0x20, 0x61, 0x69, 0x2e, 0x6e, 0x65, 0x62,
	0x69, 0x75, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x32, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x72, 0x75, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2d, 0x61, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x69, 0x61,
	0x6d, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iam_v1_access_service_proto_rawDescOnce sync.Once
	file_iam_v1_access_service_proto_rawDescData = file_iam_v1_access_service_proto_rawDesc
)

func file_iam_v1_access_service_proto_rawDescGZIP() []byte {
	file_iam_v1_access_service_proto_rawDescOnce.Do(func() {
		file_iam_v1_access_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_iam_v1_access_service_proto_rawDescData)
	})
	return file_iam_v1_access_service_proto_rawDescData
}

var file_iam_v1_access_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_iam_v1_access_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_iam_v1_access_service_proto_goTypes = []any{
	(AuthorizeResult_ResultCode)(0),                          // 0: nebius.iam.v1.AuthorizeResult.ResultCode
	(AuthorizeResult_AuthorizeStatus_AuthorizeStatusCode)(0), // 1: nebius.iam.v1.AuthorizeResult.AuthorizeStatus.AuthorizeStatusCode
	(*AuthorizeRequest)(nil),                                 // 2: nebius.iam.v1.AuthorizeRequest
	(*AuthorizeResponse)(nil),                                // 3: nebius.iam.v1.AuthorizeResponse
	(*AuthorizeCheck)(nil),                                   // 4: nebius.iam.v1.AuthorizeCheck
	(*AuthorizeResult)(nil),                                  // 5: nebius.iam.v1.AuthorizeResult
	(*AwsCompatibleSignature)(nil),                           // 6: nebius.iam.v1.AwsCompatibleSignature
	(*AmzSignatureV4KeyParams)(nil),                          // 7: nebius.iam.v1.AmzSignatureV4KeyParams
	(*AnonymousCredential)(nil),                              // 8: nebius.iam.v1.AnonymousCredential
	nil,                                                      // 9: nebius.iam.v1.AuthorizeRequest.ChecksEntry
	nil,                                                      // 10: nebius.iam.v1.AuthorizeResponse.ResultsEntry
	(*AuthorizeResult_AuthorizeStatus)(nil),                  // 11: nebius.iam.v1.AuthorizeResult.AuthorizeStatus
	(*Permission)(nil),                                       // 12: nebius.iam.v1.Permission
	(*ResourcePath)(nil),                                     // 13: nebius.iam.v1.ResourcePath
	(*Account)(nil),                                          // 14: nebius.iam.v1.Account
	(*timestamppb.Timestamp)(nil),                            // 15: google.protobuf.Timestamp
}
var file_iam_v1_access_service_proto_depIdxs = []int32{
	9,  // 0: nebius.iam.v1.AuthorizeRequest.checks:type_name -> nebius.iam.v1.AuthorizeRequest.ChecksEntry
	10, // 1: nebius.iam.v1.AuthorizeResponse.results:type_name -> nebius.iam.v1.AuthorizeResponse.ResultsEntry
	12, // 2: nebius.iam.v1.AuthorizeCheck.permission:type_name -> nebius.iam.v1.Permission
	13, // 3: nebius.iam.v1.AuthorizeCheck.resource_path:type_name -> nebius.iam.v1.ResourcePath
	14, // 4: nebius.iam.v1.AuthorizeCheck.account:type_name -> nebius.iam.v1.Account
	6,  // 5: nebius.iam.v1.AuthorizeCheck.aws_compatible_signature:type_name -> nebius.iam.v1.AwsCompatibleSignature
	8,  // 6: nebius.iam.v1.AuthorizeCheck.anonymous_credential:type_name -> nebius.iam.v1.AnonymousCredential
	0,  // 7: nebius.iam.v1.AuthorizeResult.resultCode:type_name -> nebius.iam.v1.AuthorizeResult.ResultCode
	14, // 8: nebius.iam.v1.AuthorizeResult.account:type_name -> nebius.iam.v1.Account
	11, // 9: nebius.iam.v1.AuthorizeResult.status:type_name -> nebius.iam.v1.AuthorizeResult.AuthorizeStatus
	7,  // 10: nebius.iam.v1.AwsCompatibleSignature.sign_key_params:type_name -> nebius.iam.v1.AmzSignatureV4KeyParams
	15, // 11: nebius.iam.v1.AmzSignatureV4KeyParams.amz_date:type_name -> google.protobuf.Timestamp
	4,  // 12: nebius.iam.v1.AuthorizeRequest.ChecksEntry.value:type_name -> nebius.iam.v1.AuthorizeCheck
	5,  // 13: nebius.iam.v1.AuthorizeResponse.ResultsEntry.value:type_name -> nebius.iam.v1.AuthorizeResult
	1,  // 14: nebius.iam.v1.AuthorizeResult.AuthorizeStatus.code:type_name -> nebius.iam.v1.AuthorizeResult.AuthorizeStatus.AuthorizeStatusCode
	2,  // 15: nebius.iam.v1.AccessService.Authorize:input_type -> nebius.iam.v1.AuthorizeRequest
	3,  // 16: nebius.iam.v1.AccessService.Authorize:output_type -> nebius.iam.v1.AuthorizeResponse
	16, // [16:17] is the sub-list for method output_type
	15, // [15:16] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_iam_v1_access_service_proto_init() }
func file_iam_v1_access_service_proto_init() {
	if File_iam_v1_access_service_proto != nil {
		return
	}
	file_iam_v1_access_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_iam_v1_access_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AuthorizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v1_access_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AuthorizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v1_access_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AuthorizeCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v1_access_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AuthorizeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v1_access_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AwsCompatibleSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v1_access_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AmzSignatureV4KeyParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v1_access_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AnonymousCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_v1_access_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AuthorizeResult_AuthorizeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_iam_v1_access_service_proto_msgTypes[2].OneofWrappers = []any{
		(*AuthorizeCheck_IamToken)(nil),
		(*AuthorizeCheck_Account)(nil),
		(*AuthorizeCheck_AwsCompatibleSignature)(nil),
		(*AuthorizeCheck_AnonymousCredential)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iam_v1_access_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_iam_v1_access_service_proto_goTypes,
		DependencyIndexes: file_iam_v1_access_service_proto_depIdxs,
		EnumInfos:         file_iam_v1_access_service_proto_enumTypes,
		MessageInfos:      file_iam_v1_access_service_proto_msgTypes,
	}.Build()
	File_iam_v1_access_service_proto = out.File
	file_iam_v1_access_service_proto_rawDesc = nil
	file_iam_v1_access_service_proto_goTypes = nil
	file_iam_v1_access_service_proto_depIdxs = nil
}
